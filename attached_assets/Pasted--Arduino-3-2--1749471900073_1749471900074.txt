/*
 * –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π –¥–ª—è Arduino
 * –í–µ—Ä—Å–∏—è: 3.2 (—Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫)
 */

#include <Arduino.h>
#include <WiFiS3.h>
#include <R4HttpClient.h>
#include <EEPROM.h>
#include <TimeLib.h>
#include <WiFiUdp.h>
#include <ArduinoJson.h>
#include "config.h"

// –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è (0 - –º–∏–Ω–∏–º—É–º, 1 - –±–∞–∑–æ–≤—ã–π)
#define LOG_LEVEL 1

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
#define EEPROM_ADDR_COUNT 0
#define EEPROM_ADDR_DATE  10
#define EEPROM_ADDR_TIME  20

#define TRIG_PIN 3
#define ECHO_PIN 2

#define ZONE_THRESHOLD_CM 160
#define EXIT_THRESHOLD_CM 150
#define MIN_DISTANCE_CM 10
#define REQUIRED_CONSECUTIVE_MEASUREMENTS 3

#define TIME_ZONE_OFFSET 3  // –ú–∏–Ω—Å–∫: UTC+3

// --- –í–ê–ñ–ù–û: –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —ç—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥ —Å–≤–æ–π —Å–µ—Ä–≤–µ—Ä ---
#define SERVER_HOST "192.168.2.183" // IP –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
#define SERVER_PORT 5000            // –ü–æ—Ä—Ç Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

WiFiClient client; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ SSL, –∞ –æ–±—ã—á–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
R4HttpClient http;
WiFiUDP udp;

// –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
struct {
  unsigned long count = 0;
  unsigned long lastResetDate = 0;
  bool visitorInside = false;
  int consecutiveInsideCount = 0;
  int consecutiveOutsideCount = 0;
  bool countChanged = false;
} visitorState;

// –¢–∞–π–º–∏–Ω–≥–∏
struct {
  unsigned long lastSendTime = 0;
  unsigned long lastWebSendTime = 0;
  unsigned long lastWebStatusTime = 0;
  unsigned long lastResetMillis = 0;
  unsigned long lastTimeSaveMillis = 0;
  unsigned long lastNtpSync = 0;
} timers;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
struct {
  bool webIntegration = true;
  unsigned long lastSentCount = 0;
} settings;

// –ü–æ—Ä—Ç—ã –¥–ª—è UDP
const unsigned int localPort = 65535;

// ===========================================
// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
// ===========================================

void logInfo(String message) {
  if (LOG_LEVEL >= 1) {
    Serial.println(message);
  }
}

void logError(String message) {
  Serial.println("[ERROR] " + message);
}

String getISOTimeString() {
  char timeStr[25];
  sprintf(timeStr, "%04d-%02d-%02dT%02d:%02d:%02dZ", 
          year(), month(), day(), hour(), minute(), second());
  return String(timeStr);
}

// ===========================================
// –§–£–ù–ö–¶–ò–ò –î–õ–Ø –í–ï–ë–ê (–° –£–õ–£–ß–®–ï–ù–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–û–ô –û–®–ò–ë–û–ö)
// ===========================================

bool connectToServer() {
  static unsigned long lastAttempt = 0;
  const unsigned long retryInterval = 30000; // 30 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
  
  if (millis() - lastAttempt < retryInterval && lastAttempt != 0) {
    return false;
  }
  
  lastAttempt = millis();
  
  logInfo("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É...");
  bool connected = client.connect(SERVER_HOST, SERVER_PORT);
  
  if (connected) {
    logInfo("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
  } else {
    logError("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É");
  }
  
  return connected;
}

bool sendPostRequest(String endpoint, String jsonData) {
  if (WiFi.status() != WL_CONNECTED) {
    return false;
  }

  if (!client.connected()) {
    if (!connectToServer()) {
      return false;
    }
  }

  String request = "POST " + endpoint + " HTTP/1.1\r\n";
  request += "Host: " SERVER_HOST "\r\n";
  request += "Content-Type: application/json\r\n";
  request += "Content-Length: " + String(jsonData.length()) + "\r\n";
  request += "Connection: keep-alive\r\n\r\n";
  request += jsonData;

  unsigned long startTime = millis();
  client.print(request);
  
  while (client.available() == 0 && millis() - startTime < 10000) {
    delay(50);
  }

  if (client.available() == 0) {
    logError("–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞");
    client.stop();
    return false;
  }

  String response = "";
  while (client.available()) {
    response += client.readString();
  }
  
  bool success = response.indexOf("200 OK") != -1 || 
                 response.indexOf("\"status\":\"success\"") != -1;
  
  if (!success) {
    logError("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: " + response.substring(0, 100));
    client.stop();
  }
  
  return success;
}

bool sendDataToWeb() {
  if (!settings.webIntegration || WiFi.status() != WL_CONNECTED) {
    return false;
  }

  DynamicJsonDocument doc(512);
  doc["device_id"] = DEVICE_ID;
  doc["count"] = visitorState.count;
  doc["reset_date"] = String(visitorState.lastResetDate);
  doc["timestamp"] = getISOTimeString();
  
  String jsonString;
  serializeJson(doc, jsonString);
  
  bool result = sendPostRequest("/api/visitor-count", jsonString); // –í–∞–∂–Ω–æ! endpoint –∏—Å–ø—Ä–∞–≤–ª–µ–Ω
  
  if (result) {
    logInfo("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä");
  }
  
  return result;
}

// ===========================================
// –°–¢–ê–ë–ò–õ–¨–ù–ê–Ø –ó–ê–ì–û–¢–û–í–ö–ê –§–£–ù–ö–¶–ò–ò –î–õ–Ø TELEGRAM
// ===========================================

bool sendTelegramMessage(String message) {
  // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!
  return false;
}

// ===========================================
// –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò
// ===========================================

void measureDistance() {
  static unsigned long lastMeasurement = 0;
  const unsigned long measurementInterval = 100; // –ò–∑–º–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 100 –º—Å
  
  if (millis() - lastMeasurement < measurementInterval) {
    return;
  }
  
  lastMeasurement = millis();
  
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);
  
  long duration = pulseIn(ECHO_PIN, HIGH, 30000);
  if (duration == 0) return;
  
  long distance = duration * 0.034 / 2;
  if (distance < MIN_DISTANCE_CM) return;
  
  if (!visitorState.visitorInside) {
    if (distance <= ZONE_THRESHOLD_CM) {
      visitorState.consecutiveInsideCount++;
      visitorState.consecutiveOutsideCount = 0;
    } else {
      visitorState.consecutiveInsideCount = 0;
    }
    
    if (visitorState.consecutiveInsideCount >= REQUIRED_CONSECUTIVE_MEASUREMENTS) {
      visitorState.visitorInside = true;
      visitorState.consecutiveInsideCount = 0;
      logInfo("–ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω");
    }
  } else {
    if (distance > EXIT_THRESHOLD_CM) {
      visitorState.consecutiveOutsideCount++;
      visitorState.consecutiveInsideCount = 0;
    } else {
      visitorState.consecutiveOutsideCount = 0;
    }
    
    if (visitorState.consecutiveOutsideCount >= REQUIRED_CONSECUTIVE_MEASUREMENTS) {
      visitorState.visitorInside = false;
      visitorState.consecutiveOutsideCount = 0;
      visitorState.count++;
      visitorState.countChanged = true;
      EEPROM.put(EEPROM_ADDR_COUNT, visitorState.count);
      
      logInfo("–ù–æ–≤—ã–π –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—å! –í—Å–µ–≥–æ: " + String(visitorState.count));
      
      if (settings.webIntegration) {
        sendDataToWeb();
      }
    }
  }
}

void setup() {
  Serial.begin(115200);
  delay(1000);

  logInfo("üöÄ –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π –∑–∞–ø—É—â–µ–Ω–∞");
  
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  
  unsigned long wifiStart = millis();
  while (WiFi.status() != WL_CONNECTED && millis() - wifiStart < 15000) {
    delay(500);
    Serial.print(".");
  }
  
  if (WiFi.status() == WL_CONNECTED) {
    logInfo("\nWiFi –ø–æ–¥–∫–ª—é—á–µ–Ω! IP: " + WiFi.localIP().toString());
  } else {
    logError("\n–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WiFi");
  }

  udp.begin(localPort);
  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);

  EEPROM.get(EEPROM_ADDR_COUNT, visitorState.count);
  EEPROM.get(EEPROM_ADDR_DATE, visitorState.lastResetDate);
  
  logInfo("–¢–µ–∫—É—â–∏–π —Å—á–µ—Ç—á–∏–∫: " + String(visitorState.count));
}

void loop() {
  measureDistance();
  
  static unsigned long lastCheck = 0;
  if (millis() - lastCheck >= 1000) {
    lastCheck = millis();
    
    if (millis() - timers.lastSendTime >= 60000) {
      timers.lastSendTime = millis();
      if (visitorState.countChanged) {
        String msg = "üë• –ü–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π: " + String(visitorState.count);
        if (sendTelegramMessage(msg)) {
          settings.lastSentCount = visitorState.count;
          visitorState.countChanged = false;
        }
      }
    }
    
    if (settings.webIntegration && WiFi.status() == WL_CONNECTED) {
      if (!client.connected()) {
        connectToServer();
      }
    }
  }
  
  delay(10);
}
